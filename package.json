{
  "name": "passport-twitter-token",
  "version": "0.1.5",
  "description": "Twitter token authentication strategy for Passport.",
  "author": {
    "name": "Nicholas Penree",
    "email": "nick@penree.com",
    "url": "http://penree.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/drudge/passport-twitter-token.git"
  },
  "bugs": {
    "url": "http://github.com/drudge/passport-twitter-token/issues"
  },
  "main": "./lib/passport-twitter-token",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "0.1.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "passport",
    "twitter",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "readme": "# Passport-Twitter-Token\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Twitter](http://twitter.com/) tokens\nusing the OAuth 1.0a API.\n\nThis module lets you authenticate using Twitter in your Node.js applications.\nBy plugging into Passport, Twitter authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Installation\n\n    $ npm install passport-twitter-token\n\n## Usage\n\n#### Configure Strategy\n\nThe Twitter authentication strategy authenticates users using a Twitter account\nand OAuth tokens.  The strategy requires a `verify` callback, which receives the\naccess token and corresponding secret as arguments, as well as `profile` which\ncontains the authenticated user's Twitter profile.   The `verify` callback must\ncall `done` providing a user to complete authentication.\n\nIn order to identify your application to Twitter, specify the consumer key,\nconsumer secret, and callback URL within `options`.  The consumer key and secret\nare obtained by [creating an application](https://dev.twitter.com/apps) at\nTwitter's [developer](https://dev.twitter.com/) site.\n\n```javascript\npassport.use(new TwitterTokenStrategy({\n    consumerKey: TWITTER_CONSUMER_KEY,\n    consumerSecret: TWITTER_CONSUMER_SECRET\n  },\n  function(token, tokenSecret, profile, done) {\n    User.findOrCreate({ twitterId: profile.id }, function (err, user) {\n      return done(err, user);\n    });\n  }\n));\n```\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'twitter-token'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\napp.post('/auth/twitter/token',\n  passport.authenticate('twitter-token'),\n  function (req, res) {\n    // do something with req.user\n    res.send(req.user? 200 : 401);\n  }\n);\n```\n\n#### Performing Twitter Reverse Auth Step 1 Server-Side\n\nTo remove the need to embed the consumer secret in your client application, you can setup a \nroute to perform step 1 on the server-side.\n\nFor example, as route in an [Express](http://expressjs.com/)\napplication using the [request](https://github.com/mikeal/request) module:\n\n```javascript\nvar request = require('request');\n\napp.post('/auth/twitter/reverse', function(req, res) {\n  var self = this;\n  \n  request.post({\n      url: 'https://api.twitter.com/oauth/request_token'\n    , oauth: { \n          consumer_key: app.set('twitter client key')\n        , consumer_secret: app.set('twitter client secret')\n      }\n    , form: { x_auth_mode: 'reverse_auth' }\n  }, function (err, r, body) {\n    if (err) {\n      return res.send(500, { message: e.message });\n    }\n    \n    if (body.indexOf('OAuth') !== 0) {\n      return res.send(500, { message: 'Malformed response from Twitter' });\n    }\n    \n    res.send({ x_reverse_auth_parameters: body });\n  });\n};\n```\n## Credits\n\n  - [Nicholas Penree](http://github.com/drudge)\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Nicholas Penree\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/drudge/passport-twitter-token",
  "_id": "passport-twitter-token@0.1.5",
  "_shasum": "b46c28b5003b9fdb6dbfc4116c61769515bfce8d",
  "_resolved": "git://github.com/resolute/passport-twitter-token.git#dcb78923c8559aa007eb0b144146a4dd904d611a",
  "_from": "passport-twitter-token@git://github.com/resolute/passport-twitter-token.git"
}
